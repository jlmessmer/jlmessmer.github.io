{"version":3,"sources":["components/NameTag.js","utilities/Firebase.js","components/Compliment.js","App.js","serviceWorker.js","index.js"],"names":["NameTag","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","updateName","bind","assertThisInitialized","event","setState","target","value","_this2","visible","react_default","a","createElement","className","onChange","type","placeholder","onClick","callback","React","Component","firebaseApp","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Compliment","loaded","complimentList","auth","signInAnonymously","catch","error","console","db","firestore","compsRef","collection","orderBy","limit","compliments","get","then","querySnapshot","forEach","doc","id","res","data","push","set","popularity","parseInt","dist_default","length","App","show","newName","src_components_NameTag","src_components_Compliment","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d6ff711.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './NameTag.css'\r\n\r\nclass NameTag extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      name: ''\r\n    }\r\n\r\n    this.updateName = this.updateName.bind(this)\r\n  }\r\n\r\n  updateName (event) {\r\n    this.setState({\r\n      name: event.target.value\r\n    })\r\n  }\r\n\r\n  render () {\r\n    if (this.props.visible) {\r\n      return (\r\n        <div className='nametag'>\r\n          <h1>What is your name?</h1>\r\n          <div>\r\n            <input onChange={this.updateName} value={this.state.name} type='text' placeholder=\"Don't be a stranger!\" />\r\n          </div>\r\n          <div>\r\n            <button className='submit-button' onClick={() => this.props.callback(this.state.name)}>Submit</button>\r\n          </div>\r\n        </div>\r\n      )\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n}\r\n\r\nexport default NameTag\r\n","import * as firebase from 'firebase/app'\r\n\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: 'AIzaSyBARVBBoEWlAVtTNX0TuBmjdj4XtwN4R_s',\r\n  authDomain: 'compliment-gen.firebaseapp.com',\r\n  databaseURL: 'https://compliment-gen.firebaseio.com',\r\n  projectId: 'compliment-gen',\r\n  storageBucket: 'compliment-gen.appspot.com',\r\n  messagingSenderId: '595221400428',\r\n  appId: '1:595221400428:web:3a24fb4da02abfad'\r\n}\r\n\r\nvar firebaseApp = firebase.initializeApp(firebaseConfig)\r\n\r\nexport default firebaseApp\r\n","import React from 'react'\r\nimport Typing from 'react-typing-animation'\r\nimport './Compliment.css'\r\n\r\nimport firebaseApp from '../utilities/Firebase'\r\n\r\nclass Compliment extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      loaded: false,\r\n      complimentList: []\r\n    }\r\n  }\r\n\r\n  componentDidMount () {\r\n    firebaseApp.auth().signInAnonymously().catch(error => {\r\n      console.error(error)\r\n    })\r\n    var db = firebaseApp.firestore()\r\n    var compsRef = db.collection('compliments').orderBy('popularity', 'asc').limit(1)\r\n    var compliments = []\r\n    compsRef.get().then((querySnapshot) => {\r\n      querySnapshot.forEach((doc) => {\r\n        var id = doc.id\r\n        var res = doc.data()\r\n        compliments.push(res.value)\r\n        db.collection('compliments').doc(id).set({\r\n          'value': res.value,\r\n          'popularity': parseInt(res.popularity) + 1\r\n        })\r\n        this.setState({\r\n          complimentList: compliments\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  render () {\r\n    if (this.props.visible) {\r\n      return (\r\n        <div className='compliment'>\r\n          <Typing>\r\n            <p>Hi, {this.props.name}.</p>\r\n            <p>{this.state.complimentList[this.state.complimentList.length - 1]}</p>\r\n          </Typing>\r\n        </div>\r\n      )\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n}\r\n\r\nexport default Compliment\r\n","import React from 'react'\nimport './App.css'\n\nimport NameTag from './components/NameTag'\nimport Compliment from './components/Compliment'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      name: 'name',\n      show: false\n    }\n\n    this.callback = this.callback.bind(this)\n  }\n  callback (newName) {\n    this.setState({\n      name: newName,\n      show: true\n    })\n  }\n\n  render () {\n    return (\n      <div className='App'>\n        <NameTag callback={this.callback} visible={!this.state.show} />\n        <Compliment name={this.state.name} visible={this.state.show} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}